#include <iostream>
#include <vector>

using namespace std;

/*
Очевидно, если N = 1, то возможны два варианта: “А” и “B”. Если N = 2, то можно получить сразу две последовательность,
 заканчивающиеся на ‘B’, приписав ее к каждой последовательности, получившейся на предыдущем шаге, т.е.
 последовательности “AB” и “BB”. ‘A’ можно приписать только к одной последовательности “B”, получив “BA”.
 Итого, для N = 2 получили 3 варианта. Обозначим dp[i] – количество вариантов, которые можно получить из i-блоков.
 Продолжая рассуждения в той же духе можно заметить, что для любого i можно получить dp[i-1] последовательностей,
 приписав к ним блок ‘B’, а также dp[i-2] последовательностей, которые заканчиваются на ‘B’,
 к которым можно приписать блок ‘A’. В итоге получаем рекуррентную формулу dp[i] = dp[i-1] + dp[i-2].
 Что является формулой вычисления числе Фибоначчи.
В классическом виде данная задача формулируется так: сколькими способами можно записать последовательность длины N из 0 и 1 без двух подряд идущих нулей.
*/

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>>dp(n + 1);
    dp[1].first = 1;
    dp[1].second = 1;

    for (int i = 2; i <= n; i++){
        dp[i].first = dp[i - 1].second;
        dp[i].second = dp[i - 1].first + dp[i - 1].second;
    }

    cout << dp[n].first + dp[n].second;
    return 0;
}